<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="md_Plugins_SQL_Documentation_Migration_Guide" kind="page">
    <compoundname>md_Plugins_SQL_Documentation_Migration_Guide</compoundname>
    <title>NWNX:EE SQL Migration Guide</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Included below are some examples and guidance in migrating legacy NWNX ODBC style SQL code to the new NWNX:EE SQL Plugin.</para>
<sect2 id="md_Plugins_SQL_Documentation_Migration_Guide_1autotoc_md219">
<title>General Information</title>
<para>The previous plugin only had one execution style: the SQL_ExecDirect() function that took a SQL string that had been constructed to execute.</para>
<para>The new SQL Plugin has two methods of operation:</para>
<para><orderedlist>
<listitem><para>The same ExecDirect type functionality (via <computeroutput>NWNX_SQL_ExecuteQuery(&quot;...&quot;)</computeroutput>)</para>
</listitem></orderedlist>
<orderedlist>
<listitem><para>Prepared Statements simiar to that of Java and C# where a SQL string is prepared (via <computeroutput>NWNX_SQL_PrepareQuery(...)</computeroutput>) with place holders, then script variables are bound to the variables, then the executed (via <computeroutput><ref refid="group__sql_1gab7ec4280f37f01bafe8ce01f30cc7f13" kindref="member">NWNX_SQL_ExecutePreparedQuery()</ref></computeroutput>).</para>
</listitem></orderedlist>
</para>
<para>Advantages of using the prepared version are numerous</para>
<para><orderedlist>
<listitem><para>No need to escape/un-escape values for things that cause string SQL statements problems (like single quotes or SQL injection issues). Bound data is taken as is and treated as data that won&apos;t affect the validity of the SQL statement.</para>
</listitem></orderedlist>
<orderedlist>
<listitem><para>The ability to serialize/un-serialize ObjectIDs and Objects to and from the database.</para>
</listitem></orderedlist>
<orderedlist>
<listitem><para>Probably some others, too!</para>
</listitem></orderedlist>
</para>
</sect2>
<sect2 id="md_Plugins_SQL_Documentation_Migration_Guide_1autotoc_md220">
<title>Examples</title>
<para>A legacy (albeit contrived) example might look like this:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//This<sp/>is<sp/>a<sp/>silly,<sp/>non-sensical<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SomeUsefulFunction(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>oPC,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>oBoard)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sPlayerAccount<sp/>=<sp/>SQLEncodeSpecialChars(GetPCPlayerName(oPC));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sPCName<sp/>=<sp/>SQLEncodeSpecialChars(GetName(oPC));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sql<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SELECT<sp/>kills<sp/>FROM<sp/>kill_history<sp/>WHERE<sp/>player<sp/>=<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>sPlayerAccount<sp/>+<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>AND<sp/>name=&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>sPCName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SQLExecDirect(sql);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sFeedback<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Kill<sp/>list\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(SQLFetch()<sp/>==<sp/>SQL_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFeedback<sp/>+=<sp/>SQLDecodeSpecialChars(SQLGetData(1))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFeedback<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>kills.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AssignCommand(oBoard,<sp/>ActionSpeakString(sFeedback));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The simple, straight forward converted version using exising code as much as possible and with copious comments:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//This<sp/>is<sp/>a<sp/>silly,<sp/>non-sensical<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SomeUsefulFunction(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>oPC,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>oBoard)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>still<sp/>have<sp/>to<sp/>encode<sp/>data<sp/>if<sp/>we&apos;re<sp/>building<sp/>a<sp/>string<sp/>for<sp/>direct<sp/>execution.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sPlayerAccount<sp/>=<sp/>SQLEncodeSpecialChars(GetPCPlayerName(oPC));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sPCName<sp/>=<sp/>SQLEncodeSpecialChars(GetName(oPC));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>the<sp/>SQL<sp/>string<sp/>as<sp/>before.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sql<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SELECT<sp/>kills<sp/>FROM<sp/>kill_history<sp/>WHERE<sp/>player<sp/>=<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>sPlayerAccount<sp/>+<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>AND<sp/>name=&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>sPCName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sFeedback<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Kill<sp/>list\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ExecuteQuery<sp/>returns<sp/>boolean<sp/>success/failure.<sp/><sp/>Checking<sp/>for<sp/>failure<sp/>is<sp/>optional,<sp/>but<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gives<sp/>you<sp/>the<sp/>opportunity<sp/>to<sp/>recover<sp/>from<sp/>the<sp/>failrue.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="group__sql_1gad50edb1ed094961a96ef95f8099993ef" kindref="member">NWNX_SQL_ExecuteQuery</ref>(sql);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="group__sql_1ga38fdaf8c308512015849ac94ffede3bb" kindref="member">NWNX_SQL_ReadyToReadNextRow</ref>())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sql_1gaefc1bce86231177b8f972a8c0dc91a0b" kindref="member">NWNX_SQL_ReadNextRow</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>NWNX_SQL_ReadDataInActiveRow<sp/>is<sp/>zero<sp/>based..<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0<sp/>is<sp/>the<sp/>first<sp/>column,<sp/>1<sp/>is<sp/>the<sp/>second,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also,<sp/>it<sp/>returns<sp/>a<sp/>string<sp/>representation<sp/>by<sp/>default.<sp/><sp/>Use<sp/>StringToInt/Float<sp/>as<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFeedback<sp/>+=<sp/><ref refid="group__sql_1ga60dd9ffe0369ff795d4e375452edec51" kindref="member">NWNX_SQL_ReadDataInActiveRow</ref>(0)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>report<sp/>failure?<sp/><sp/>log<sp/>message,<sp/>broadcast<sp/>to<sp/>DMs,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFeedback<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>kills.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AssignCommand(oBoard,<sp/>ActionSpeakString(sFeedback));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>A more optimal approach that utilizies the parameterized query to avoid having to escape the input data:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//This<sp/>is<sp/>a<sp/>silly,<sp/>non-sensical<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SomeUsefulFunction(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>oPC,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>oBoard)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>need<sp/>for<sp/>escaping<sp/>special<sp/>caracters.<sp/><sp/>Binding<sp/>will<sp/>take<sp/>care<sp/>of<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sPlayerAccount<sp/>=<sp/>GetPCPlayerName(oPC);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sPCName<sp/>=<sp/>GetName(oPC);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>MySQL&apos;s<sp/>binding<sp/>format.<sp/><sp/>PostgreSQL<sp/>uses<sp/>$1,<sp/>$2,<sp/>$3...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sql<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SELECT<sp/>kills<sp/>FROM<sp/>kill_history<sp/>WHERE<sp/>player=?<sp/>AND<sp/>name=?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sFeedback<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Kill<sp/>list\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>boolean<sp/>success/failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="group__sql_1gae2e0e27014d82accfe4a0e510720515f" kindref="member">NWNX_SQL_PrepareQuery</ref>(sql);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>prepare<sp/>fails,<sp/>continuting<sp/>on<sp/>with<sp/>binding<sp/>and<sp/>execution<sp/>should<sp/>not<sp/>cause<sp/>a<sp/>server<sp/>abort</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>checking<sp/>return<sp/>codes<sp/>gives<sp/>you<sp/>the<sp/>option<sp/>to<sp/>recover<sp/>and/or<sp/>report<sp/>the<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sql_1ga585546f0c7907cecde5a59508cbf4535" kindref="member">NWNX_SQL_PreparedString</ref>(0,<sp/>sPlayerAccount);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sql_1ga585546f0c7907cecde5a59508cbf4535" kindref="member">NWNX_SQL_PreparedString</ref>(1,<sp/>sPCName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__sql_1gab7ec4280f37f01bafe8ce01f30cc7f13" kindref="member">NWNX_SQL_ExecutePreparedQuery</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="group__sql_1ga38fdaf8c308512015849ac94ffede3bb" kindref="member">NWNX_SQL_ReadyToReadNextRow</ref>())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__sql_1gaefc1bce86231177b8f972a8c0dc91a0b" kindref="member">NWNX_SQL_ReadNextRow</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>NWNX_SQL_ReadDataInActiveRow<sp/>is<sp/>zero<sp/>based..<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0<sp/>is<sp/>the<sp/>first<sp/>column,<sp/>1<sp/>is<sp/>the<sp/>second,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also,<sp/>it<sp/>returns<sp/>a<sp/>string<sp/>representation<sp/>by<sp/>default.<sp/><sp/>Use<sp/>StringToInt/Float<sp/>as<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFeedback<sp/>+=<sp/><ref refid="group__sql_1ga60dd9ffe0369ff795d4e375452edec51" kindref="member">NWNX_SQL_ReadDataInActiveRow</ref>(0)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>execute<sp/>failed?<sp/><sp/>report<sp/>or<sp/>handle<sp/>as<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>report/log<sp/>failure?</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFeedback<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>kills.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AssignCommand(oBoard,<sp/>ActionSpeakString(sFeedback));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_Plugins_SQL_Documentation_Migration_Guide_1autotoc_md221">
<title>Multi-Platform Support</title>
<para>There is a function to retrieve the specfic database type to enable multi-platform support through conditional logic.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WriteTimestampedLogEntry(</highlight><highlight class="stringliteral">&quot;Multi-Platform<sp/>example..&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GetDatabaseType<sp/>returns<sp/>the<sp/>same<sp/>name<sp/>used<sp/>in<sp/>the<sp/>NWNX_SQL_TYPE<sp/>environment<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Environment<sp/>var<sp/>is<sp/>not<sp/>case<sp/>sensitive,<sp/>so<sp/>normalize<sp/>to<sp/>upper<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>db_type<sp/>=<sp/>GetStringUpperCase(<ref refid="group__sql_1ga4fbbffe1e86ad0e677185395b52949f5" kindref="member">NWNX_SQL_GetDatabaseType</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MySQL<sp/>version<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(db_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MYSQL&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>text<sp/>column<sp/>definition<sp/>differs<sp/>slightly</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sCreate<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CREATE<sp/>TABLE<sp/>sql_test<sp/>(&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colInt<sp/>INT,<sp/>colFloat<sp/>FLOAT,<sp/>colStr<sp/>VARCHAR(256),&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colObjId<sp/>INT,<sp/>colObj<sp/>TEXT(1000000)<sp/>);&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sInsert<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;INSERT<sp/>INTO<sp/>sql_test(colInt,<sp/>colFloat,<sp/>colStr,<sp/>colObjId,<sp/>colObj)<sp/>VALUES(?,<sp/>?,<sp/>?,<sp/>?,<sp/>?)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PostgreSQL<sp/>version<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(db_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;POSTGRESQL&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>text<sp/>column<sp/>definition<sp/>differs<sp/>slightly</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sCreate<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CREATE<sp/>TABLE<sp/>sql_test<sp/>(&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colInt<sp/>INT,<sp/>colFloat<sp/>FLOAT,<sp/>colStr<sp/>VARCHAR(256),&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;colObjId<sp/>INT,<sp/>colObj<sp/>TEXT<sp/>);&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>though<sp/>we&apos;re<sp/>using<sp/>0<sp/>based<sp/>parameter<sp/>numbers,<sp/>PostgreSQL<sp/>requires<sp/>the<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>numbers<sp/>in<sp/>the<sp/>actual<sp/>SQL<sp/>string<sp/>to<sp/>be<sp/>1<sp/>based<sp/>(e.g.<sp/>$1,<sp/>$2...<sp/><sp/>not<sp/>$0,<sp/>$1...<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sInsert<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;INSERT<sp/>INTO<sp/>sql_test(colInt,<sp/>colFloat,<sp/>colStr,<sp/>colObjId,<sp/>colObj)<sp/>VALUES($1,<sp/>$2,<sp/>$3,<sp/>$4,<sp/>$5)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/><ref refid="group__sql_1gad50edb1ed094961a96ef95f8099993ef" kindref="member">NWNX_SQL_ExecuteQuery</ref>(sCreate);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!b)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteTimestampedLogEntry(</highlight><highlight class="stringliteral">&quot;Create<sp/>table<sp/>failed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/><ref refid="group__sql_1gae2e0e27014d82accfe4a0e510720515f" kindref="member">NWNX_SQL_PrepareQuery</ref>(sInsert);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!b)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteTimestampedLogEntry(</highlight><highlight class="stringliteral">&quot;Object<sp/>insert<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cleanup<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>etc.,<sp/>etc.</highlight></codeline>
</programlisting> </para>
</sect2>
    </detaileddescription>
  </compounddef>
</doxygen>
