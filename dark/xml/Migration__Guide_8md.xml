<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="Migration__Guide_8md" kind="file" language="Markdown">
    <compoundname>Migration_Guide.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">##<sp/>NWNX:EE<sp/>SQL<sp/>Migration<sp/>Guide</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Included<sp/>below<sp/>are<sp/>some<sp/>examples<sp/>and<sp/>guidance<sp/>in<sp/>migrating<sp/>legacy<sp/>NWNX<sp/>ODBC<sp/>style<sp/>SQL<sp/>code<sp/>to<sp/>the<sp/>new<sp/>NWNX:EE<sp/>SQL<sp/>Plugin.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>General<sp/>Information</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>previous<sp/>plugin<sp/>only<sp/>had<sp/>one<sp/>execution<sp/>style:<sp/><sp/>the<sp/>SQL_ExecDirect()<sp/>function<sp/>that<sp/>took<sp/>a<sp/>SQL<sp/>string<sp/>that<sp/>had<sp/>been<sp/>constructed<sp/>to<sp/>execute.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>new<sp/>SQL<sp/>Plugin<sp/>has<sp/>two<sp/>methods<sp/>of<sp/>operation:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>The<sp/>same<sp/>ExecDirect<sp/>type<sp/>functionality<sp/>(via<sp/>``NWNX_SQL_ExecuteQuery(&quot;...&quot;)``)</highlight></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>Prepared<sp/>Statements<sp/>simiar<sp/>to<sp/>that<sp/>of<sp/>Java<sp/>and<sp/>C#<sp/>where<sp/>a<sp/>SQL<sp/>string<sp/>is<sp/>prepared<sp/>(via<sp/>``NWNX_SQL_PrepareQuery(...)``)<sp/>with<sp/>place<sp/>holders,<sp/>then<sp/>script<sp/>variables<sp/>are<sp/>bound<sp/>to<sp/>the<sp/>variables,<sp/>then<sp/>the<sp/>executed<sp/>(via<sp/>``NWNX_SQL_ExecutePreparedQuery()``).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Advantages<sp/>of<sp/>using<sp/>the<sp/>prepared<sp/>version<sp/>are<sp/>numerous</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>No<sp/>need<sp/>to<sp/>escape/un-escape<sp/>values<sp/>for<sp/>things<sp/>that<sp/>cause<sp/>string<sp/>SQL<sp/>statements<sp/>problems<sp/>(like<sp/>single<sp/>quotes<sp/>or<sp/>SQL<sp/>injection<sp/>issues).<sp/><sp/>Bound<sp/>data<sp/>is<sp/>taken<sp/>as<sp/>is<sp/>and<sp/>treated<sp/>as<sp/>data<sp/>that<sp/>won&apos;t<sp/>affect<sp/>the<sp/>validity<sp/>of<sp/>the<sp/>SQL<sp/>statement.</highlight></codeline>
<codeline><highlight class="normal">1.<sp/>The<sp/>ability<sp/>to<sp/>serialize/un-serialize<sp/>ObjectIDs<sp/>and<sp/>Objects<sp/>to<sp/>and<sp/>from<sp/>the<sp/>database.</highlight></codeline>
<codeline><highlight class="normal">1.<sp/><sp/>Probably<sp/>some<sp/>others,<sp/>too!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Examples</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>legacy<sp/>(albeit<sp/>contrived)<sp/>example<sp/>might<sp/>look<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//This<sp/>is<sp/>a<sp/>silly,<sp/>non-sensical<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">int<sp/>SomeUsefulFunction(object<sp/>oPC,<sp/>object<sp/>oBoard)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>sPlayerAccount<sp/>=<sp/>SQLEncodeSpecialChars(GetPCPlayerName(oPC));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>sPCName<sp/>=<sp/>SQLEncodeSpecialChars(GetName(oPC));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>sql<sp/>=<sp/>&quot;SELECT<sp/>kills<sp/>FROM<sp/>kill_history<sp/>WHERE<sp/>player<sp/>=<sp/>&apos;&quot;<sp/>+<sp/>sPlayerAccount<sp/>+<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&apos;<sp/>AND<sp/>name=&apos;&quot;<sp/>+<sp/>sPCName<sp/>+<sp/>&quot;&apos;&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SQLExecDirect(sql);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>sFeedback<sp/>=<sp/>&quot;Kill<sp/>list\n&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(SQLFetch()<sp/>==<sp/>SQL_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFeedback<sp/>+=<sp/>SQLDecodeSpecialChars(SQLGetData(1))<sp/>+<sp/>&quot;<sp/>\n&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFeedback<sp/>=<sp/>&quot;No<sp/>kills.&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AssignCommand(oBoard,<sp/>ActionSpeakString(sFeedback));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>simple,<sp/>straight<sp/>forward<sp/>converted<sp/>version<sp/>using<sp/>exising<sp/>code<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>and<sp/>with<sp/>copious<sp/>comments:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//This<sp/>is<sp/>a<sp/>silly,<sp/>non-sensical<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">int<sp/>SomeUsefulFunction(object<sp/>oPC,<sp/>object<sp/>oBoard)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>still<sp/>have<sp/>to<sp/>encode<sp/>data<sp/>if<sp/>we&apos;re<sp/>building<sp/>a<sp/>string<sp/>for<sp/>direct<sp/>execution.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>sPlayerAccount<sp/>=<sp/>SQLEncodeSpecialChars(GetPCPlayerName(oPC));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>sPCName<sp/>=<sp/>SQLEncodeSpecialChars(GetName(oPC));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>build<sp/>the<sp/>SQL<sp/>string<sp/>as<sp/>before.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>sql<sp/>=<sp/>&quot;SELECT<sp/>kills<sp/>FROM<sp/>kill_history<sp/>WHERE<sp/>player<sp/>=<sp/>&apos;&quot;<sp/>+<sp/>sPlayerAccount<sp/>+<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&apos;<sp/>AND<sp/>name=&apos;&quot;<sp/>+<sp/>sPCName<sp/>+<sp/>&quot;&apos;&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>sFeedback<sp/>=<sp/>&quot;Kill<sp/>list\n&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>ExecuteQuery<sp/>returns<sp/>boolean<sp/>success/failure.<sp/><sp/>Checking<sp/>for<sp/>failure<sp/>is<sp/>optional,<sp/>but<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>gives<sp/>you<sp/>the<sp/>opportunity<sp/>to<sp/>recover<sp/>from<sp/>the<sp/>failrue.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>ret<sp/>=<sp/>NWNX_SQL_ExecuteQuery(sql);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ret)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(NWNX_SQL_ReadyToReadNextRow())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NWNX_SQL_ReadNextRow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note<sp/>NWNX_SQL_ReadDataInActiveRow<sp/>is<sp/>zero<sp/>based..<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/>0<sp/>is<sp/>the<sp/>first<sp/>column,<sp/>1<sp/>is<sp/>the<sp/>second,<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Also,<sp/>it<sp/>returns<sp/>a<sp/>string<sp/>representation<sp/>by<sp/>default.<sp/><sp/>Use<sp/>StringToInt/Float<sp/>as<sp/>necessary.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFeedback<sp/>+=<sp/>NWNX_SQL_ReadDataInActiveRow(0)<sp/>+<sp/>&quot;<sp/>\n&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>report<sp/>failure?<sp/><sp/>log<sp/>message,<sp/>broadcast<sp/>to<sp/>DMs,<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFeedback<sp/>=<sp/>&quot;No<sp/>kills.&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AssignCommand(oBoard,<sp/>ActionSpeakString(sFeedback));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>more<sp/>optimal<sp/>approach<sp/>that<sp/>utilizies<sp/>the<sp/>parameterized<sp/>query<sp/>to<sp/>avoid<sp/>having<sp/>to<sp/>escape<sp/>the<sp/>input<sp/>data:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//This<sp/>is<sp/>a<sp/>silly,<sp/>non-sensical<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">int<sp/>SomeUsefulFunction(object<sp/>oPC,<sp/>object<sp/>oBoard)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>no<sp/>need<sp/>for<sp/>escaping<sp/>special<sp/>caracters.<sp/><sp/>Binding<sp/>will<sp/>take<sp/>care<sp/>of<sp/>that.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>sPlayerAccount<sp/>=<sp/>GetPCPlayerName(oPC);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>sPCName<sp/>=<sp/>GetName(oPC);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>this<sp/>is<sp/>MySQL&apos;s<sp/>binding<sp/>format.<sp/><sp/>PostgreSQL<sp/>uses<sp/>$1,<sp/>$2,<sp/>$3...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>sql<sp/>=<sp/>&quot;SELECT<sp/>kills<sp/>FROM<sp/>kill_history<sp/>WHERE<sp/>player=?<sp/>AND<sp/>name=?&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>sFeedback<sp/>=<sp/>&quot;Kill<sp/>list\n&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i=0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>returns<sp/>boolean<sp/>success/failure.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>ret<sp/>=<sp/>NWNX_SQL_PrepareQuery(sql);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ret)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>the<sp/>prepare<sp/>fails,<sp/>continuting<sp/>on<sp/>with<sp/>binding<sp/>and<sp/>execution<sp/>should<sp/>not<sp/>cause<sp/>a<sp/>server<sp/>abort</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>but<sp/>checking<sp/>return<sp/>codes<sp/>gives<sp/>you<sp/>the<sp/>option<sp/>to<sp/>recover<sp/>and/or<sp/>report<sp/>the<sp/>failure.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NWNX_SQL_PreparedString(0,<sp/>sPlayerAccount);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NWNX_SQL_PreparedString(1,<sp/>sPCName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>NWNX_SQL_ExecutePreparedQuery();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ret)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(NWNX_SQL_ReadyToReadNextRow())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NWNX_SQL_ReadNextRow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note<sp/>NWNX_SQL_ReadDataInActiveRow<sp/>is<sp/>zero<sp/>based..<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/>0<sp/>is<sp/>the<sp/>first<sp/>column,<sp/>1<sp/>is<sp/>the<sp/>second,<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Also,<sp/>it<sp/>returns<sp/>a<sp/>string<sp/>representation<sp/>by<sp/>default.<sp/><sp/>Use<sp/>StringToInt/Float<sp/>as<sp/>necessary.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFeedback<sp/>+=<sp/>NWNX_SQL_ReadDataInActiveRow(0)<sp/>+<sp/>&quot;<sp/>\n&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>execute<sp/>failed?<sp/><sp/>report<sp/>or<sp/>handle<sp/>as<sp/>necessary.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>report/log<sp/>failure?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFeedback<sp/>=<sp/>&quot;No<sp/>kills.&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AssignCommand(oBoard,<sp/>ActionSpeakString(sFeedback));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Multi-Platform<sp/>Support</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">There<sp/>is<sp/>a<sp/>function<sp/>to<sp/>retrieve<sp/>the<sp/>specfic<sp/>database<sp/>type<sp/>to<sp/>enable<sp/>multi-platform<sp/>support<sp/>through<sp/>conditional<sp/>logic.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WriteTimestampedLogEntry(&quot;Multi-Platform<sp/>example..&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>GetDatabaseType<sp/>returns<sp/>the<sp/>same<sp/>name<sp/>used<sp/>in<sp/>the<sp/>NWNX_SQL_TYPE<sp/>environment<sp/>variable.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Environment<sp/>var<sp/>is<sp/>not<sp/>case<sp/>sensitive,<sp/>so<sp/>normalize<sp/>to<sp/>upper<sp/>case.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>db_type<sp/>=<sp/>GetStringUpperCase(NWNX_SQL_GetDatabaseType());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>MySQL<sp/>version<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(db_type<sp/>==<sp/>&quot;MYSQL&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>text<sp/>column<sp/>definition<sp/>differs<sp/>slightly</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sCreate<sp/>=<sp/>&quot;CREATE<sp/>TABLE<sp/>sql_test<sp/>(&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;colInt<sp/>INT,<sp/>colFloat<sp/>FLOAT,<sp/>colStr<sp/>VARCHAR(256),&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;colObjId<sp/>INT,<sp/>colObj<sp/>TEXT(1000000)<sp/>);&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sInsert<sp/>=<sp/>&quot;INSERT<sp/>INTO<sp/>sql_test(colInt,<sp/>colFloat,<sp/>colStr,<sp/>colObjId,<sp/>colObj)<sp/>VALUES(?,<sp/>?,<sp/>?,<sp/>?,<sp/>?)&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>PostgreSQL<sp/>version<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(db_type<sp/>==<sp/>&quot;POSTGRESQL&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>text<sp/>column<sp/>definition<sp/>differs<sp/>slightly</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sCreate<sp/>=<sp/>&quot;CREATE<sp/>TABLE<sp/>sql_test<sp/>(&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;colInt<sp/>INT,<sp/>colFloat<sp/>FLOAT,<sp/>colStr<sp/>VARCHAR(256),&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;colObjId<sp/>INT,<sp/>colObj<sp/>TEXT<sp/>);&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Even<sp/>though<sp/>we&apos;re<sp/>using<sp/>0<sp/>based<sp/>parameter<sp/>numbers,<sp/>PostgreSQL<sp/>requires<sp/>the<sp/>parameter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>numbers<sp/>in<sp/>the<sp/>actual<sp/>SQL<sp/>string<sp/>to<sp/>be<sp/>1<sp/>based<sp/>(e.g.<sp/>$1,<sp/>$2...<sp/><sp/>not<sp/>$0,<sp/>$1...<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sInsert<sp/>=<sp/>&quot;INSERT<sp/>INTO<sp/>sql_test(colInt,<sp/>colFloat,<sp/>colStr,<sp/>colObjId,<sp/>colObj)<sp/>VALUES($1,<sp/>$2,<sp/>$3,<sp/>$4,<sp/>$5)&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>b<sp/>=<sp/>NWNX_SQL_ExecuteQuery(sCreate);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!b)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteTimestampedLogEntry(&quot;Create<sp/>table<sp/>failed!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>NWNX_SQL_PrepareQuery(sInsert);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!b)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteTimestampedLogEntry(&quot;Object<sp/>insert<sp/>failed.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>cleanup<sp/>if<sp/>necessary.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>etc.,<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
    </programlisting>
    <location file="Plugins/SQL/Documentation/Migration_Guide.md"/>
  </compounddef>
</doxygen>
