<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="md_Plugins_Redis_Documentation_README" kind="page">
    <compoundname>md_Plugins_Redis_Documentation_README</compoundname>
    <title>Redis Plugin Reference</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="md_Plugins_Redis_Documentation_README_1autotoc_md182">
<title>Description</title>
<para>This plugin allows you to connect to a redis server. If you don&apos;t know what redis is, I&apos;d suggest reading up here in detail: redis.io.</para>
<para>Key features:</para>
<para><itemizedlist>
<listitem><para>This plugin supports almost all commands</para>
</listitem><listitem><para>Including pubsub with script callbacks. You can use this to connect external services, even websites, to your nwserver in a non-blocking way.</para>
</listitem><listitem><para>Also great for linking servers.</para>
</listitem><listitem><para>Redis makes for a very good and fast key-value store, with some advanced data structures available. You can even use it as a queue if so desired.</para>
</listitem></itemizedlist>
</para>
<para>TODO:</para>
<para><itemizedlist>
<listitem><para>SCO/RCO, so resman can automatically load resources from redis without user intervention. This requires a more generic interface/hook in core.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_Plugins_Redis_Documentation_README_1autotoc_md183">
<title>Hints</title>
<para><itemizedlist>
<listitem><para>There are two includes, <computeroutput>nwnx_redis</computeroutput> and <computeroutput>nwnx_redis_short</computeroutput>. They do the same, but <computeroutput>_short</computeroutput> is not prefixed with <computeroutput>NWNX_Redis</computeroutput>.</para>
</listitem><listitem><para><computeroutput><ref refid="nwnx__redis__ps_8nss" kindref="compound">nwnx_redis_ps.nss</ref></computeroutput> and <computeroutput><ref refid="on__pubsub_8nss" kindref="compound">on_pubsub.nss</ref></computeroutput> are not needed if PubSub functionality is not being used.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_Plugins_Redis_Documentation_README_1autotoc_md184">
<title>Setup</title>
<para><itemizedlist>
<listitem><para>Set up redis-server. Start it. This should be as simple as apt-get install redis. There&apos;s also a docker image.</para>
</listitem><listitem><para>Configure <computeroutput>NWNX_REDIS_HOST</computeroutput> and <computeroutput>NWNX_REDIS_PORT</computeroutput> for nwnx. <computeroutput>NWNX_REDIS_PORT</computeroutput> is not necessary if the default redis port is used.</para>
</listitem><listitem><para>Include the .nss files in NWScript/ into your module.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_Plugins_Redis_Documentation_README_1autotoc_md185">
<title>Accessing Redis from nwscript</title>
<para>To use Redis commands in nwscript include <computeroutput>nwnx_redis</computeroutput> and <computeroutput>nwnx_redis_lib</computeroutput>. The nwnx_redis include contains the redis commands like, for example, <computeroutput>int <ref refid="nwnx__redis_8nss_1a511b24aea00b12ff67e15857891c2a1b" kindref="member">NWNX_Redis_GET(string key)</ref></computeroutput>. All of the nwnx redis comands return an int which is the resultId. The nwnx_redis_lib include contains functions to get the data (and type) you can work with for this resultId. Three of these functions are:<itemizedlist>
<listitem><para>int <ref refid="group__redis_1ga1348f79753eb3dd2208edf7e63d84553" kindref="member">NWNX_Redis_GetResultAsInt(int resultId)</ref></para>
</listitem><listitem><para>string <ref refid="group__redis_1ga54287d82441086cf187b5768af08490d" kindref="member">NWNX_Redis_GetResultAsString(int resultId)</ref></para>
</listitem><listitem><para>float <ref refid="group__redis_1ga523105181c8d483ce731648bde0d16f4" kindref="member">NWNX_Redis_GetResultAsFloat(int resultId)</ref></para>
</listitem></itemizedlist>
</para>
<para>There are also functions to work with result arrays and one to get the type of a result. You can look those up in <ulink url="../NWScript/nwnx_redis_lib.nss">nwnx_redis_lib.nss</ulink>.</para>
<para><computeroutput>NWNX_Redis_GetResultAs&lt;Type&gt;</computeroutput> has to be called on all the commands that return a resultId even if the actual value is an int as well. The following is an example to set, check for existance of and get a key. <programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&quot;nwnx_redis&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nwnx_redis_lib&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="nwnx__redis_8nss_1ad96b4061c4b94b7d4334f9162e519d6e" kindref="member">NWNX_Redis_SET</ref>(</highlight><highlight class="stringliteral">&quot;examples:examplekey&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;testvalue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__redis_1ga1348f79753eb3dd2208edf7e63d84553" kindref="member">NWNX_Redis_GetResultAsInt</ref>(<ref refid="nwnx__redis_8nss_1a7440040404ff2e41a1c4292e5a2f34ea" kindref="member">NWNX_Redis_EXISTS</ref>(</highlight><highlight class="stringliteral">&quot;examples:examplekey&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sValue<sp/>=<sp/><ref refid="group__redis_1ga54287d82441086cf187b5768af08490d" kindref="member">NWNX_Redis_GetResultAsString</ref>(<ref refid="nwnx__redis_8nss_1a511b24aea00b12ff67e15857891c2a1b" kindref="member">NWNX_Redis_GET</ref>(</highlight><highlight class="stringliteral">&quot;examples:examplekey&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WriteTimestampedLogEntry(</highlight><highlight class="stringliteral">&quot;Value<sp/>of<sp/>redis<sp/>key<sp/>&apos;examples:examplekey&apos;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>sValue);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_Plugins_Redis_Documentation_README_1autotoc_md186">
<title>Getting started with PubSub</title>
<para><itemizedlist>
<listitem><para>Create a script called &quot;on_pubsub&quot; (or rename it through <computeroutput>NWNX_REDIS_PUBSUB_SCRIPT</computeroutput>). An example is included in NWScript/.</para>
</listitem><listitem><para>Configure <computeroutput>NWNX_REDIS_PUBSUB_CHANNELS</computeroutput> to be &quot;test&quot;.</para>
</listitem><listitem><para>Hint: Subscriptions support wildcards.</para>
</listitem><listitem><para>Start your module.</para>
</listitem><listitem><para>Use <computeroutput>redis-cli</computeroutput> to connect to your running redis server and type <computeroutput>PUBLISH test hi there</computeroutput>.</para>
</listitem><listitem><para>Hint: <computeroutput>redis-cli monitor</computeroutput> in a separate shell is a great way to figure out what&apos;s going on.</para>
</listitem><listitem><para>Your script should trigger with the payload available through <computeroutput><ref refid="nwnx__redis__ps_8nss_1a64b6374c703673f57977a0473ec6f52c" kindref="member">NWNX_Redis_GetPubSubMessageData()</ref></computeroutput>.</para>
</listitem></itemizedlist>
</para>
<sect2 id="md_Plugins_Redis_Documentation_README_1autotoc_md187">
<title>Moving on</title>
<para><itemizedlist>
<listitem><para>Now think of a good naming scheme for your various pubsub channels. Keep traffic as low as feasible, since each incoming message will trigger a script run. There is no batching yet.</para>
</listitem><listitem><para>Hint: By convention, a good namespace separator for channels is &quot;.&quot;; for keys &quot;:&quot;.</para>
</listitem><listitem><para>Example: <computeroutput>NWNX_Redis_PUBLISH(&quot;nwserver.players.join&quot;, GetPCPlayerName(..));</computeroutput></para>
</listitem><listitem><para>Hint: A good pattern is to store data in a redis key named after the channel and object identifier (i.e. <computeroutput>HSET nwserver:players:PlayerName:.lastSeen 1234</computeroutput>) and then trigger a PubSub message with the same subject (<computeroutput>PUBLISH nwserver.players.joins PlayerName</computeroutput>). This cuts down on wire overhead.</para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="md_Plugins_Redis_Documentation_README_1autotoc_md188">
<title>Environment Variables</title>
<para><table rows="5" cols="3"><row>
<entry thead="yes"><para>Variable Name  </para>
</entry><entry thead="yes"><para>Type  </para>
</entry><entry thead="yes"><para>Default Value   </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>NWNX_REDIS_HOST</computeroutput>  </para>
</entry><entry thead="no"><para>string  </para>
</entry><entry thead="no"><para>(none)   </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>NWNX_REDIS_PORT</computeroutput>  </para>
</entry><entry thead="no"><para>int16  </para>
</entry><entry thead="no"><para>6379   </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>NWNX_REDIS_PUBSUB_SCRIPT</computeroutput>  </para>
</entry><entry thead="no"><para>string  </para>
</entry><entry thead="no"><para>on_pubsub   </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>NWNX_REDIS_PUBSUB_CHANNELS</computeroutput>  </para>
</entry><entry thead="no"><para>comma-separated strings  </para>
</entry><entry thead="no"><para>&quot;&quot;   </para>
</entry></row>
</table>
</para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
